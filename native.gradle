import org.apache.tools.ant.taskdefs.condition.Os

def getBuildParameters(base, bits) {
  def bitSuffix = (bits == 32) ? 'x86' : 'x86-64'

  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    return [
        'identifier': "win-${bitSuffix}",
        'library': "${base}.dll",
        'setupArguments': ["-DBITZ:STRING=${bits}", '-A', (bits == 64 ? 'x64' : 'Win32')],
        'buildArguments': ['--config', 'Release'],
        'env': [:]
    ]
  } else if (Os.isFamily(Os.FAMILY_MAC)) {
    return [
        'identifier': 'darwin',
        'library': "lib${base}.so",
        'setupArguments': ["-DBITZ:STRING=${bits}"],
        'buildArguments': [],
        'env': ['CXXFLAGS': "-m${bits}", 'CFLAGS': "-m${bits}", 'LDFLAGS': "-m${bits}"]
    ]
  } else {
    return [
        'identifier': "linux-${bitSuffix}",
        'library': "lib${base}.dylib",
        'setupArguments': ["-DBITZ:STRING=${bits}"],
        'buildArguments': [],
        'env': ['CXXFLAGS': "-m${bits}", 'CFLAGS': "-m${bits}", 'LDFLAGS': "-m${bits}"]
    ]
  }
}

def getHomeDirectory() {
  def directory = file(System.getProperty('java.home'))
  return directory.name == 'jre' ? directory.parentFile.absolutePath : directory.absolutePath
}

def createBuildTask(buildBase, projectBase, deployBase, compileTask, checkTask, base, bits) {
  def parameters = getBuildParameters(base, bits)
  def buildDirectory = "$buildBase/${parameters.identifier}"
  def distDirectory = "$projectBase/dist/${parameters.identifier}"
  def deployDirectory = "$deployBase/src/main/resources/natives/${parameters.identifier}"
  def taskBase = "${base}-${bits}"

  if (Os.isFamily(Os.FAMILY_MAC) && bits != 64) {
    return
  }

  parameters.env.put('DIST_DIR', distDirectory)
  parameters.env.put('JAVA_HOME', getHomeDirectory())

  def setupTask = tasks.create("${taskBase}-setup", Exec) {
    doFirst {
      buildOpus(bits, false)

      file(buildDirectory).with {
        it.deleteDir()
        it.mkdirs()
      }
    }

    workingDir buildDirectory
    executable 'cmake'
    args(parameters.setupArguments + ['../..'])
    environment parameters.env
  }

  def buildTask = tasks.create("${taskBase}-build", Exec) {
    workingDir buildDirectory
    executable 'cmake'
    args(['--build', '.'] + parameters.buildArguments)
    environment parameters.env
  }

  def deployTask = tasks.create("${taskBase}-deploy") << {
    copy {
      from distDirectory
      into deployDirectory
    }
  }
  
  tasks.create("${taskBase}-deploy-only") << {
    copy {
      from distDirectory
      into deployDirectory
    }
  }

  setupTask.dependsOn(tasks.load)
  buildTask.dependsOn(setupTask)
  deployTask.dependsOn(buildTask)
  compileTask.dependsOn(deployTask)

  if (!file("${deployDirectory}/${parameters.library}").exists()) {
    checkTask.dependsOn(deployTask)
  }
}
